on:
  push:
    branches:
      - main  # Trigger workflow only on pushes to the main branch
    paths-ignore:
      - README.md  # Ignore changes to README.md to prevent unnecessary runs

jobs:
  integration:
    name: Continuous Integration
    runs-on: ubuntu-latest  # Use latest Ubuntu runner

    steps:
      - name: Checkout Code
        uses: actions/checkout@v3  # Fetch the repository code

      - name: Linting code
        run: echo "Linting the code"  # Placeholder for actual linting command

      - name: Unit testing
        run: echo "running unit test cases"  # Placeholder for actual unit tests

  build-push-image:
    name: Continuous Delivery
    needs: integration  # Ensure CI job completes before running CD job
    runs-on: ubuntu-latest  # Use latest Ubuntu runner

    steps:
      - name: Checkout code
        uses: actions/checkout@v3  # Fetch the repository code

      - name: Install the Utilities
        run: |
          sudo apt-get update  # Update package lists
          sudo apt-get install -y jq unzip  # Install necessary utilities

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
            aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}  # AWS access key
            aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}  # AWS secret key
            aws-region: ${{ secrets.AWS_REGION }}  # AWS region

      - name: AWS ECR Login
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1  # Log in to AWS ECR

      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}  # Retrieve ECR registry URL
          ECR_REPOSITORY: ${{ secrets.ECR_REPOSITORY_NAME }}  # Retrieve ECR repository name
          IMAGE_TAG: latest  # Define the image tag
        run: |
          # Build the Docker image
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          
          # Push the image to Amazon ECR
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          
          # Set the output variable with the image URL
          echo "::set-output name=image::$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"
          
  # Continuous Deployment job to pull the image and deploy it
  Continuous-Deployment:
    needs: build-push-image  # This job depends on the 'build-and-push-ecr-image' job
    runs-on: self-hosted  # Use a self-hosted runner
    steps:
      # Step: 1 to checkout the code from the repository
      - name: Checkout
        uses: actions/checkout@v3

      # Step: 2 Configure AWS credentials using secrets
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      # Step: 3 Login to Amazon ECR
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      # Step: 4 Debug AWS credentials (for troubleshooting purposes)
      - name: Debug AWS credentials
        run: |
          echo "AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}"
          echo "AWS_REGION: ${{ secrets.AWS_REGION }}"
          echo "AWS_ECR_LOGIN_URI: ${{ secrets.AWS_ECR_LOGIN_URI }}"

      # Step: 5 to pull the latest image from ECR
      - name: Pull latest images
        run: |
          docker pull ${{ steps.login-ecr.outputs.registry }}/${{ secrets.ECR_REPOSITORY_NAME }}:latest

      # Step: 6 Stop and remove the existing container if it exists
      - name: Stop and remove existing container (if exists)
        run: |
          docker ps -q --filter "name=creditcard_fraud_detection" | xargs -r docker stop || true
          docker ps -a -q --filter "name=creditcard_fraud_detection" | xargs -r docker rm -fv || true

      # Step: 7 Run the Docker container to serve the users (Expose it on port 8000)
      - name: Run Docker Image to serve users
        run: |
          docker run -d -p 8000:8000 --ipc="host" --name=creditcard_fraud_detection \
            -e 'AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }}' \
            -e 'AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }}' \
            -e 'AWS_REGION=${{ secrets.AWS_REGION }}' \
            ${{secrets.AWS_ECR_LOGIN_URI}}/${{ secrets.ECR_REPOSITORY_NAME }}:latest

      # Step: 8 Clean up previous images and containers to free up space
      - name: Clean previous images and containers
        run: |
          docker system prune -f